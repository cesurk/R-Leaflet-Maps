m
m <- leaflet() %>%
## addTiles() %>%
addMarkers(ln=174.768, lat=-36.852)
m
m <- leaflet() %>%
addTiles() %>%
addMarkers(ln=174.768, lat=-36.852)
m
m <- leaflet() %>%
addTiles() %>%
addMarkers(ln=174.768, lat=-36.852)
m
m
m <- leaflet() %>%
addTiles() %>%
addMarkers(ln=174.768, lat=-36.852)
m
# Basic map with circle
df <- data.frame(Lat=1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
leaflet(df) %>% addCircles(data = df)
leaflet(df) %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
# Library maps
library(maps)
install.packages(maps)
install.packages("maps")
# Library maps
library(maps)
mapStates = map("state", fill = TRUE, plot = TRUE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
mapStates
m = leaflet() %>% addTiles()
library(leaflet)
library(ggplot2)
library(maps)
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
m
# Simple map
m = leaflet() %>% addTiles()
m
# Map of the States
mapStates = map("state", fill = TRUE, plot = TRUE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m <- leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m
# Simple map
m = leaflet() %>% addTiles()
# Libraries required
library(leaflet)
library(ggplot2)
library(maps)
# Basic map with marker
m <- leaflet() %>%
addTiles() %>%
addMarkers(ln=174.768, lat=-36.852)
# Basic map with circle
df <- data.frame(Lat=1:10, Long = rnorm(10))
leaflet(df) %>% addCircles(data = df)
leaflet(df) %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
# Basic map with circle
df <- data.frame(Lat=1:10, Long = rnorm(10))
leaflet(df) %>% addCircles(data = df)
leaflet(df) %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
rm()
rm(df)
rm(m)
rm(mapStates)
clear
clear()
library(leaflet)
library(ggplot2)
library(maps)
# Basic map with marker
m <- leaflet() %>%
addTiles() %>%
addMarkers(ln=174.768, lat=-36.852)
# Basic map with circle
df <- data.frame(Lat=1:10, Long = rnorm(10))
leaflet(df) %>% addCircles(data = df)
leaflet(df) %>% addCircles(data = df, lat = ~ Lat, lng = ~ Long)
# Libraries required
library(leaflet)
library(ggplot2)
library(maps)
# Basic map with marker
m <- leaflet() %>%
addTiles() %>%
addMarkers(ln=174.768, lat=-36.852)
m
shiny::runApp('C:/Users/cesur/Desktop/StatsCan/ev-data-viz')
runApp('C:/Users/cesur/Desktop/StatsCan/ev-data-viz')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet(CSDs) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5, opacity = 1.0,
fillColor = "#444444", fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
#addMarkers(data = points())
})
}
shinyApp(ui, server)
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("lcsd000b16a_e.shp",
layer = "lcsd000b16a_e") #, GDAL1_integer64_policy = TRUE)
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("lcsd000b16a_e.shp",
layer = "lcsd000b16a_e") #, GDAL1_integer64_policy = TRUE)
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("lcsd000b16a_e.shp",
layer = "lcsd000b16a_e", GDAL1_integer64_policy = TRUE)
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("lcsd000b16a_e.shp")
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("lcsd000b16a_e.shp", layer = "lcsd000b16a_e", GDAL1_integer64_policy = TRUE)
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("./lcsd000b16a_e.shp", layer = "lcsd000b16a_e", GDAL1_integer64_policy = TRUE)
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("C:\Users\cesur\Desktop\StatsCan\lcsd000b16a_e.shp", layer = "lcsd000b16a_e", GDAL1_integer64_policy = TRUE)
# From Statistics Canada, 2016 Census, Boundary Files
CSDs_fullsize <- readOGR("C:/Users/cesur/Desktop/StatsCan/lcsd000b16a_e.shp", layer = "lcsd000b16a_e", GDAL1_integer64_policy = TRUE)
# Simplify full size shapefile
CSDs <- rmapshaper::ms_simplify(CSDs_fullsize)
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet(CSDs_fullsize) %>%
addPolygons(color = "#444444", weight = 1, smoothFactor = 0.5, opacity = 1.0,
fillColor = "#444444", fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
#addMarkers(data = points())
})
}
shinyApp(ui, server)
leaflet(CSDs_fullsize) %>%
addMultiPolygons(color = "#444444", weight = 1, smoothFactor = 0.5, opacity = 1.0,
fillColor = "#444444", fillOpacity = 0.3,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
library(shiny); runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
runApp('C:/Users/cesur/Desktop/StatsCan/cesur.R')
# From Statistics Canada, 2016 Census, Boundary Files
Provs <- readOGR("C:/Users/cesur/Desktop/StatsCan/Provinces.json")
Shape <- geojsonio::geojson_read("json/Provinces.json", what = "sp")
Shape <- geojsonio::geojson_read("Provinces.json", what = "sp")
Shape <- geojsonio::geojson_read("C:/Users/cesur/Desktop/StatsCan/Provinces.json", what = "sp")
warnings()
Shape <- geojsonio::geojson_read("C:/Users/cesur/Desktop/StatsCan/Provinces_simplified.json", what = "sp")
Shape <- geojsonio::geojson_read("C:/Users/cesur/Desktop/StatsCan/Provinces_simplified.geojson", what = "sp")
library(sf)
Shape <- geojsonio::geojson_read("C:/Users/cesur/Desktop/StatsCan/Provinces_simplified.geojson", what = "sp")
test <- sf::st_read("C:/Users/cesur/Desktop/StatsCan/shp/lpr_000b16a_e.shp")
leaflet(test) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1)
library(shiny)
library(leaflet)
library(rgdal)
library(rmapshaper)
library(sf)
library(rjson)
test <- sf::st_read("C:/Users/cesur/Desktop/StatsCan/shp/lpr_000b16a_e.shp")
leaflet(test) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1)
library(sp)
#> Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3
shape_file <- system.file("C:/Users/cesur/Desktop/StatsCan/shp/lpr_000b16a_e.shp", package = "sf")
spdf_original <- read_sf(shape_file)
#> Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3
shape_file <- system.file("shp/lpr_000b16a_e.shp", package = "sf")
spdf_original <- read_sf(shape_file)
#> Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3
#shape_file <- system.file("shp/lpr_000b16a_e.shp", package = "sf")
spdf_original <- read_sf("C:/Users/cesur/Desktop/StatsCan/shp/lpr_000b16a_e.shp")
spdf_lon_lat <- st_transform(spdf_original, 4326)
test <- sf::st_read("C:/Users/cesur/Desktop/StatsCan/shp/lpr_000b16a_e.shp")
leaflet(spdf_lon_lat) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1)
runApp('C:/Users/cesur/Desktop/StatsCan/cesur2.R')
# Install Required Packages as required
# install.packages(c("shiny", "leaflet", "sf"))
# Read in Required Packages
#library(shiny)
library(leaflet)
#library(sf)
library(dplyr)
#library(rgdal)
#library(tidyr)
# Set Working Directory
# Note: Replace with your desired workspace
setwd('C:/Users/cesur/Desktop/StatsCan/R-Leaflet-Maps')
### Shapefile Steps
# 1) Read in CSD-Level Shapefile
# Note: Supporting files (*.dbp, *.prj, *.shp, *.shx) must also be in same directory
shape <- read_sf("shp/lpr_000b16a_e.shp")
# 2) Transform Shapefile to Latitude-and-Longitude and EPSG Projection 4326
shape_lat_lon <- st_transform(shape, 4326)
# 3) Simply shapefile for quicker mapping
shape_simplified <- rmapshaper::ms_simplify(shape_lat_lon)
### Data Steps
# Import CERB data:
data_in <- read.csv("data/PCU_total_des_candidats_uniques_PT_groupe_age-CERB_total_unique_applicants_PT_Age_group.csv")
data_ref <- read.csv("data/ReferenceData-Age.csv") %>%
rename("Group" = "Age.Group.Codes..Codes.de.groupes.d.Ã¢ge")
pr_concordance <- read.csv("data/province_concordance.csv")
# Clean CERB Data:
#   1) Rename column names
#   2) Convert Group column to character from numeric for join
#   3) Join to reference data for full group names
#   4) Keep only required columns
data_clean <- data_in %>%
rename("Week" = "pcu_date_des_donnees_inclus.cerb_week_ending_date") %>%
rename("PRCode" = "code_de_la_subdivision_canadienne.canadian_subdivision_code") %>%
rename("Value" = "compte_unique_du_demandeur.unique_applicant_count") %>%
rename("Group" = "code_de_groupe_dage.age_group_code") %>%
mutate("Group" = as.character(Group)) %>%
left_join(data_ref, by=c("Group"="Group")) %>%
select(c(Week, PRCode, Age, Value))
# Data aggregation:
#   1) Select only data from week of 2020-10-04
#   2) Sum all age groups together
data_agg <- data_clean %>%
filter(Week == "2020-10-04") %>%
group_by(PRCode) %>%
summarise(VALUE = sum(Value))
### Map 1 - CERB Applicants by Province
# Create a continuous palette function based on population domain
pal <- colorNumeric(
palette = "Blues",
domain = data_agg$VALUE)
# Join desired data to Shapefile data
shape_and_data <- shape_simplified %>%
left_join(pr_concordance, by=c('PREABBR'='shape_key')) %>%
left_join(data_agg, by=c('data_key'='PRCode'))
# Map CERB Applicants on provincial map
leaflet(shape_and_data) %>%
addPolygons(
color = "#EEEEEE", weight = 0.3, opacity = 1,
fillColor = ~pal(VALUE), fillOpacity = 1,
label = ~paste0(PRNAME, ": ", formatC(VALUE, big.mark = ","))) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright", pal = pal, values = ~VALUE,
title = "Unique CERB Applicants (Week of 2020-10-04)",
opacity = 1)
### Map 2 - CERB Applicants per thousand people by Province
# Read in population data
pop_in <- read.csv("data/Province_Population_1710014201.csv")
pop_clean <- pop_in %>%
rename("REF_DATE" = "Ã¯..REF_DATE") %>%
rename(POP = "VALUE") %>%
filter(REF_DATE == 2020) %>%
select(c(GEO, REF_DATE, POP))
# Join to existing shape and data file
shape_and_data <- shape_and_data %>%
left_join(pop_clean, by=c('PRENAME'='GEO')) %>%
mutate(SHARE_PER_K = round((VALUE / POP * 1000), digits=1))
# Create a continuous palette function based on population domain
pal <- colorNumeric(
palette = "Blues",
domain = shape_and_data$SHARE_PER_K)
# Map share of applicants on provincial map
leaflet(shape_and_data) %>%
addPolygons(
color = "#EEEEEE", weight = 0.3, opacity = 1,
fillColor = ~pal(SHARE_PER_K), fillOpacity = 1,
label = ~paste0(PRNAME, ": ", formatC(SHARE_PER_K, big.mark = ","))) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright", pal = pal, values = ~SHARE_PER_K,
title = "Number of Unique CERB <br/> Applicants Per 1,000 People <br/>(Week of 2020-10-04)",
opacity = 1)
library(sf)
# 3) Simply shapefile for quicker mapping
shape_simplified <- rmapshaper::ms_simplify(shape_lat_lon)
# 2) Transform Shapefile to Latitude-and-Longitude and EPSG Projection 4326
shape_lat_lon <- st_transform(shape, 4326)
# 1) Read in CSD-Level Shapefile
# Note: Supporting files (*.dbp, *.prj, *.shp, *.shx) must also be in same directory
shape <- read_sf("shp/lpr_000b16a_e.shp")
# 2) Transform Shapefile to Latitude-and-Longitude and EPSG Projection 4326
shape_lat_lon <- st_transform(shape, 4326)
# Install Required Packages as required
# install.packages(c("shiny", "leaflet", "sf"))
# Read in Required Packages
#library(shiny)
library(leaflet) # Package to build maps
library(sf) # Package that helps work with shapefiles
library(dplyr) # Very common package for data manipulation
#library(rgdal)
#library(tidyr)
# Set Working Directory
# Note: Replace with your desired workspace
setwd('C:/Users/cesur/Desktop/StatsCan/R-Leaflet-Maps')
### Shapefile Steps
# 1) Read in CSD-Level Shapefile
# Note: Supporting files (*.dbp, *.prj, *.shp, *.shx) must also be in same directory
shape <- read_sf("shp/lpr_000b16a_e.shp")
# 2) Transform Shapefile to Latitude-and-Longitude and EPSG Projection 4326
shape_lat_lon <- st_transform(shape, 4326)
# 3) Simply shapefile for quicker mapping
shape_simplified <- rmapshaper::ms_simplify(shape_lat_lon)
### Data Steps
# Import CERB data:
data_in <- read.csv("data/PCU_total_des_candidats_uniques_PT_groupe_age-CERB_total_unique_applicants_PT_Age_group.csv")
data_ref <- read.csv("data/ReferenceData-Age.csv") %>%
rename("Group" = "Age.Group.Codes..Codes.de.groupes.d.Ã¢ge")
pr_concordance <- read.csv("data/province_concordance.csv")
# Clean CERB Data:
#   1) Rename column names
#   2) Convert Group column to character from numeric for join
#   3) Join to reference data for full group names
#   4) Keep only required columns
data_clean <- data_in %>%
rename("Week" = "pcu_date_des_donnees_inclus.cerb_week_ending_date") %>%
rename("PRCode" = "code_de_la_subdivision_canadienne.canadian_subdivision_code") %>%
rename("Value" = "compte_unique_du_demandeur.unique_applicant_count") %>%
rename("Group" = "code_de_groupe_dage.age_group_code") %>%
mutate("Group" = as.character(Group)) %>%
left_join(data_ref, by=c("Group"="Group")) %>%
select(c(Week, PRCode, Age, Value))
# Data aggregation:
#   1) Select only data from week of 2020-10-04
#   2) Sum all age groups together
data_agg <- data_clean %>%
filter(Week == "2020-10-04") %>%
group_by(PRCode) %>%
summarise(VALUE = sum(Value))
### Map 1 - CERB Applicants by Province
# Create a continuous palette function based on population domain
pal <- colorNumeric(
palette = "Blues",
domain = data_agg$VALUE)
# Join desired data to Shapefile data
shape_and_data <- shape_simplified %>%
left_join(pr_concordance, by=c('PREABBR'='shape_key')) %>%
left_join(data_agg, by=c('data_key'='PRCode'))
# Map CERB Applicants on provincial map
leaflet(shape_and_data) %>%
addPolygons(
color = "#EEEEEE", weight = 0.3, opacity = 1,
fillColor = ~pal(VALUE), fillOpacity = 1,
label = ~paste0(PRNAME, ": ", formatC(VALUE, big.mark = ","))) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright", pal = pal, values = ~VALUE,
title = "Unique CERB Applicants (Week of 2020-10-04)",
opacity = 1)
### Map 2 - CERB Applicants per thousand people by Province
# Read in population data
pop_in <- read.csv("data/Province_Population_1710014201.csv")
pop_clean <- pop_in %>%
rename("REF_DATE" = "Ã¯..REF_DATE") %>%
rename(POP = "VALUE") %>%
filter(REF_DATE == 2020) %>%
select(c(GEO, REF_DATE, POP))
# Join to existing shape and data file
shape_and_data <- shape_and_data %>%
left_join(pop_clean, by=c('PRENAME'='GEO')) %>%
mutate(SHARE_PER_K = round((VALUE / POP * 1000), digits=1))
# Create a continuous palette function based on population domain
pal <- colorNumeric(
palette = "Blues",
domain = shape_and_data$SHARE_PER_K)
# Map share of applicants on provincial map
leaflet(shape_and_data) %>%
addPolygons(
color = "#EEEEEE", weight = 0.3, opacity = 1,
fillColor = ~pal(SHARE_PER_K), fillOpacity = 1,
label = ~paste0(PRNAME, ": ", formatC(SHARE_PER_K, big.mark = ","))) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright", pal = pal, values = ~SHARE_PER_K,
title = "Number of Unique CERB <br/> Applicants Per 1,000 People <br/>(Week of 2020-10-04)",
opacity = 1)
# Install Required Packages as required
# install.packages(c("shiny", "leaflet", "sf"))
# Read in Required Packages
#library(shiny)
library(leaflet) # Package to build maps
library(sf) # Package that helps work with shapefiles
library(dplyr) # Very common package for data manipulation
#library(rgdal)
# Set Working Directory
# Note: Replace with your desired workspace
setwd('C:/Users/cesur/Desktop/StatsCan/R-Leaflet-Maps')
### Shapefile Steps
# 1) Read in Provincial Shapefile
# Note: Supporting files (*.dbp, *.prj, *.shp, *.shx) must also be in same directory
shape <- read_sf("shp/lpr_000b16a_e.shp")
# 2) Transform Shapefile to Latitude-and-Longitude and EPSG Projection 4326
shape_lat_lon <- st_transform(shape, 4326)
# 3) Simply shapefile for quicker mapping
shape_simplified <- rmapshaper::ms_simplify(shape_lat_lon)
### Data Steps
# Import Provincial Population data
data_in <- read.csv("data/Province_Population_1710014201.csv")
data_clean <- data_in %>%
rename("REF_DATE" = "Ã¯..REF_DATE") %>%
filter(REF_DATE == 2021) %>%
select(c(GEO, REF_DATE, VALUE))
# Create a continuous palette function based on population domain
pal <- colorNumeric(
palette = "Blues",
domain = data_clean$VALUE)
### Map 1 - Very Simple Provincial Map:
# Plot Shapefile on simple base map
leaflet(shape_simplified) %>%
addPolygons(
color = "#EEEEEE", weight = 0.3, opacity = 1,
fillColor = "#1572A1", fillOpacity = 0.3)
### Map 2 - Provincial Map of Population:
# Join desired data to Shapefile data
shape_and_data <- left_join(shape_simplified, data_clean, by=c('PRENAME'='GEO'))
# Plot population on provincial polygons
leaflet(shape_and_data) %>%
addPolygons(
color = "#EEEEEE", weight = 0.3, opacity = 1,
fillColor = ~pal(VALUE), fillOpacity = 1,
label = ~paste0(PRNAME, ": ", formatC(VALUE, big.mark = ","))) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addLegend("bottomright", pal = pal, values = ~VALUE,
title = "Population (Q4 2021)",
opacity = 1)
### Map 3 - Provincial Map of Population Using Circles:
# Calculate centroid of each province
centroids <- shape_simplified %>%
st_centroid() %>%
select(c(PRUID, geometry)) %>%
unnest_wider(geometry) %>%
rename("cent_long" = "...1", "cent_lati" = "...2")
# Join centroid to shape and data file
shape_and_data <- shape_and_data %>%
left_join(centroids, by=c('PRUID'='PRUID'))
# Map population data on provincial polygon
leaflet(shape_and_data) %>%
addPolygons(
color = "#EEEEEE", weight = 0.3, opacity = 1,
fillColor = "#EEEEEE", fillOpacity = 1,
label = ~paste0(PRNAME, ": ", formatC(VALUE, big.mark = ","))) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircles(lng = ~cent_long, lat = ~cent_lati, weight = 1,
radius = ~sqrt(VALUE) * 150,
label = ~paste0(PRNAME, ": ", formatC(VALUE, big.mark = ",")))
centroids <- shape_simplified %>%
st_centroid() %>%
select(c(PRUID, geometry)) %>%
unnest_wider(geometry) %>%
rename("cent_long" = "...1", "cent_lati" = "...2")
library(tidyr)
### Map 3 - Provincial Map of Population Using Circles:
# Calculate centroid of each province
centroids <- shape_simplified %>%
st_centroid() %>%
select(c(PRUID, geometry)) %>%
unnest_wider(geometry) %>%
rename("cent_long" = "...1", "cent_lati" = "...2")
### Map 3 - Provincial Map of Population Using Circles:
# Calculate centroid of each province
centroids <- shape_simplified %>%
st_centroid() %>%
select(c(PRUID, geometry)) %>%
unnest_wider(geometry) %>%
rename("cent_long" = "...1", "cent_lati" = "...2")
# Join centroid to shape and data file
shape_and_data <- shape_and_data %>%
left_join(centroids, by=c('PRUID'='PRUID'))
